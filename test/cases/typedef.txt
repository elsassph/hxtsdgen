typedef W = {
	var w:Int;
}

@:expose
interface X {
	var x:Int;
}

@:expose("Y2")
typedef Y = {>W,
	var y:Int;
}

@:expose
typedef Z = {
	function f1(a:String):Int;
	var f2: String -> Int;
};

@:expose
class A {
	public function f():X {
		return null;
	}
}

@:expose
class B {
	public function f():Y {
		return { y: 1, w: 2 };
	}
}

@:expose
interface C {
	function f1():X;
	function f2(p:Z):Void;
}

interface D {
}

@:expose
typedef E = D; // not supported

----

export interface X {
	x: number;
}

export type Y2 = {
	w: number;
	y: number;
}

export type Z = {
	f1(a: string): number;
	f2: (arg0: string) => number;
}

export class A {
	private constructor();
	f(): X;
}

export class B {
	private constructor();
	f(): Y2;
}

export interface C {
	f1(): X;
	f2(p: Z): void;
}
